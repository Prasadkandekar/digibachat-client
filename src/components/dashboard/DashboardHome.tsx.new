import React, { useState, useEffect } from 'react';
import { 
  PiggyBank, 
  Users, 
  Plus, 
  Search,
  Calendar,
  ArrowDownLeft
} from 'lucide-react';
import { Group } from '../../types/group';
import { groupService } from '../../services/groupService';
import CreateGroupModal from '../CreateGroupModal';
import JoinGroupModal from '../JoinGroupModal';
import ContributeModal from '../ContributeModal';

const DashboardHome: React.FC = () => {
  const [groups, setGroups] = useState<Group[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showJoinModal, setShowJoinModal] = useState(false);
  const [showContributeModal, setShowContributeModal] = useState(false);
  const [selectedGroupForContribution, setSelectedGroupForContribution] = useState<Group | null>(null);
  const [totalSavings, setTotalSavings] = useState(0);

  useEffect(() => {
    loadUserGroups();
  }, []);

  const loadUserGroups = async () => {
    try {
      setLoading(true);
      const userGroups = await groupService.getMyGroups();
      setGroups(userGroups);
      
      // Calculate total savings across all groups
      const savings = userGroups.reduce((total: number, group: Group) => total + (group.savings_amount || 0), 0);
      setTotalSavings(savings);
    } catch (error) {
      console.error('Failed to load groups:', error);
    } finally {
      setLoading(false);
    }
  };

  const stats = [
    {
      title: 'Total Savings',
      value: `₹${totalSavings.toLocaleString()}`,
      icon: PiggyBank,
      color: 'bg-green-500',
      description: 'Across all groups'
    },
    {
      title: 'Groups Joined',
      value: groups.length.toString(),
      icon: Users,
      color: 'bg-teal-500',
      description: 'Active savings groups'
    },
    {
      title: 'Join New Group',
      value: 'Connect',
      icon: Plus,
      color: 'bg-purple-500',
      description: 'Enter group code',
      action: () => setShowJoinModal(true)
    },
    {
      title: 'Create Group',
      value: 'Start',
      icon: Plus,
      color: 'bg-orange-500',
      description: 'New savings group',
      action: () => setShowCreateModal(true)
    }
  ];

  const handleCreateGroup = async (groupData: any) => {
    try {
      await groupService.createGroup(groupData);
      await loadUserGroups();
      setShowCreateModal(false);
    } catch (error) {
      console.error('Failed to create group:', error);
    }
  };

  const handleJoinGroup = async (groupCode: string) => {
    try {
      await groupService.joinGroup(groupCode);
      await loadUserGroups();
      setShowJoinModal(false);
    } catch (error) {
      console.error('Failed to join group:', error);
    }
  };

  const handleContribution = async (paymentMethod: string) => {
    if (!selectedGroupForContribution) return;
    
    try {
      await groupService.makeContribution(selectedGroupForContribution.id, paymentMethod);
      await loadUserGroups();
      setShowContributeModal(false);
      setSelectedGroupForContribution(null);
    } catch (error) {
      console.error('Failed to process contribution:', error);
      throw error;
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900">Savings Dashboard</h1>
        <p className="text-gray-600">Manage your savings groups and track your progress</p>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {stats.map((stat, index) => (
          <div
            key={index}
            onClick={stat.action}
            className={`bg-white p-6 rounded-xl shadow-sm hover:shadow-md transition-shadow cursor-pointer ${
              stat.action ? 'hover:scale-105 transform transition-transform' : ''
            }`}
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 mb-1">{stat.title}</p>
                <p className="text-2xl font-bold text-gray-900">{stat.value}</p>
                <p className="text-sm text-gray-500">{stat.description}</p>
              </div>
              <div className={`w-12 h-12 ${stat.color} rounded-lg flex items-center justify-center`}>
                <stat.icon className="w-6 h-6 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Groups Section */}
      <div className="grid lg:grid-cols-1 gap-8">
        <div className="bg-white rounded-xl shadow-sm p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-lg font-semibold text-gray-900">Your Savings Groups</h3>
            <div className="flex items-center space-x-4">
              <div className="relative">
                <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
                <input
                  type="text"
                  placeholder="Search groups..."
                  className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500"
                />
              </div>
            </div>
          </div>

          <div className="space-y-3">
            {groups.map((group) => (
              <div
                key={group.id}
                className="border border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors cursor-pointer"
                onClick={() => setSelectedGroup(selectedGroup?.id === group.id ? null : group)}
              >
                {/* Group Header */}
                <div className="flex justify-between items-start mb-3">
                  <div>
                    <h4 className="font-semibold text-gray-900">{group.name}</h4>
                    <p className="text-sm text-gray-500">{group.description}</p>
                  </div>
                  <div className="text-right">
                    <span className="text-sm bg-teal-100 text-teal-800 px-2 py-1 rounded">
                      {group.savings_frequency}
                    </span>
                    <p className="text-xs text-gray-500 mt-1">Code: {group.group_code}</p>
                  </div>
                </div>

                {/* Quick Stats */}
                <div className="grid grid-cols-3 gap-4 mb-3 text-sm">
                  <div className="text-center">
                    <p className="text-gray-600">Monthly Contribution</p>
                    <p className="font-semibold">₹{group.savings_amount}</p>
                  </div>
                  <div className="text-center">
                    <p className="text-gray-600">Interest Rate</p>
                    <p className="font-semibold text-green-600">{group.interest_rate}%</p>
                  </div>
                  <div className="text-center">
                    <p className="text-gray-600">Duration</p>
                    <p className="font-semibold">{group.default_loan_duration} months</p>
                  </div>
                </div>

                {/* Expanded Details */}
                {selectedGroup?.id === group.id && (
                  <div className="mt-4 pt-4 border-t border-gray-200">
                    {/* Contribution Details */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <p className="text-sm text-gray-600 mb-1">Next Contribution Due</p>
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 text-teal-600 mr-1" />
                          <span className="text-xs text-gray-500">September 15, 2025</span>
                        </div>
                      </div>
                      <div>
                        <p className="text-sm text-gray-600 mb-1">Amount Due</p>
                        <div className="flex items-center">
                          <ArrowDownLeft className="w-4 h-4 text-green-600 mr-1" />
                          <span className="font-medium">₹{group.savings_amount}</span>
                        </div>
                      </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="flex space-x-2">
                      <button className="flex-1 bg-gray-100 text-gray-700 px-3 py-2 rounded text-sm hover:bg-gray-200">
                        View History
                      </button>
                      <button 
                        className="flex-1 bg-blue-100 text-blue-700 px-3 py-2 rounded text-sm hover:bg-blue-200"
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedGroupForContribution(group);
                          setShowContributeModal(true);
                        }}
                      >
                        Add Contribution
                      </button>
                      <button className="flex-1 bg-green-100 text-green-700 px-3 py-2 rounded text-sm hover:bg-green-200">
                        Invite Members
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>

          {groups.length === 0 && (
            <div className="text-center py-12">
              <Users className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h4 className="text-lg font-medium text-gray-600 mb-2">No groups yet</h4>
              <p className="text-gray-500">Join or create a group to start saving together</p>
            </div>
          )}
        </div>
      </div>

      {/* Modals */}
      {showCreateModal && (
        <CreateGroupModal
          onClose={() => setShowCreateModal(false)}
          onSubmit={handleCreateGroup}
        />
      )}

      {showJoinModal && (
        <JoinGroupModal
          onClose={() => setShowJoinModal(false)}
          onSubmit={handleJoinGroup}
        />
      )}

      {showContributeModal && selectedGroupForContribution && (
        <ContributeModal
          onClose={() => {
            setShowContributeModal(false);
            setSelectedGroupForContribution(null);
          }}
          onSubmit={handleContribution}
          amount={selectedGroupForContribution.savings_amount}
          groupName={selectedGroupForContribution.name}
        />
      )}
    </div>
  );
};

export default DashboardHome;
